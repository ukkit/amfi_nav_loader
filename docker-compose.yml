services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: py_con
    volumes:
      - ./app:/app
    environment:
      - MYSQL_HOST=mysqldb
      - MYSQL_PORT=${IN_MYSQL_PORT}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      - mysqldb
    networks:
      - amfi_net

  mysqldb:
    image: mysql:8.0
    container_name: my_con
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - '${IN_MYSQL_PORT}:${OUT_MYSQL_PORT}' # Map MySQL container port to host
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Mount the init script
    networks:
      - amfi_net

  adminer:
    image: adminer:latest
    container_name: ad_con
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: mysqldb
    depends_on:
      - mysqldb
    networks:
      - amfi_net

volumes:
  mysql-data:

networks:
  amfi_net:
    driver: bridge
